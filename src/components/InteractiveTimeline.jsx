import React, { useState } from 'react';
import '../styles/InteractiveTimeline.css';

const timelineData = [
    {
        id: 1,
        year: "1818-1883",
        title: "Karl Marx",
        description: "Ph√°t tri·ªÉn l√Ω thuy·∫øt v·ªÅ giai c·∫•p v√† ƒë·∫•u tranh giai c·∫•p",
        details: "Marx ƒë·∫∑t n·ªÅn m√≥ng cho l√Ω thuy·∫øt giai c·∫•p hi·ªán ƒë·∫°i, ph√¢n t√≠ch m√¢u thu·∫´n gi·ªØa t∆∞ s·∫£n v√† v√¥ s·∫£n trong 'Tuy√™n ng√¥n ƒê·∫£ng C·ªông s·∫£n' v√† 'T∆∞ b·∫£n lu·∫≠n'.",
        color: "var(--primary-red)",
        link: "/theory",
        image: "üìö"
    },
    {
        id: 2,
        year: "1820-1895",
        title: "Friedrich Engels", 
        description: "ƒê·ªìng s√°ng l·∫≠p ch·ªß nghƒ©a M√°c-x√≠t, ph√°t tri·ªÉn l√Ω thuy·∫øt v·ªÅ ngu·ªìn g·ªëc gia ƒë√¨nh",
        details: "Engels b·ªï sung quan ƒëi·ªÉm v·ªÅ vai tr√≤ c·ªßa kinh t·∫ø trong x√£ h·ªôi v√† ph√¢n t√≠ch s·ª± ti·∫øn h√≥a c·ªßa c√°c h√¨nh th√°i x√£ h·ªôi.",
        color: "var(--secondary-yellow)",
        image: "‚ö°",
        link: "/theory"
    },
    {
        id: 3,
        year: "1870-1924",
        title: "Vladimir Lenin",
        description: "Ph√°t tri·ªÉn l√Ω thuy·∫øt M√°c-x√≠t trong th·ªùi ƒë·∫°i ƒë·∫ø qu·ªëc",
        details: "Lenin √°p d·ª•ng v√† ph√°t tri·ªÉn l√Ω thuy·∫øt M√°c-x√≠t v√†o th·ª±c ti·ªÖn c√°ch m·∫°ng, t·∫°o n√™n ch·ªß nghƒ©a M√°c-L√™nin.",
        color: "var(--primary-red-light)",
        link: "/role",
        image: "üö©"
    },
    {
        id: 4,
        year: "1818-1968",
        title: "Phong tr√†o C√°ch m·∫°ng",
        description: "·ª®ng d·ª•ng th·ª±c ti·ªÖn l√Ω thuy·∫øt ƒë·∫•u tranh giai c·∫•p",
        details: "C√°c cu·ªôc c√°ch m·∫°ng x√£ h·ªôi ch·ªß nghƒ©a tr√™n th·∫ø gi·ªõi ch·ª©ng minh t√≠nh ƒë√∫ng ƒë·∫Øn c·ªßa l√Ω thuy·∫øt ƒë·∫•u tranh giai c·∫•p.",
        color: "var(--accent-gold)",
        link: "/role",
        image: "üåç"
    },
    {
        id: 5,
        year: "1975-nay",
        title: "Th·ªùi k·ª≥ ƒê·ªïi m·ªõi",
        description: "V·∫≠n d·ª•ng s√°ng t·∫°o trong ƒëi·ªÅu ki·ªán m·ªõi",
        details: "Vi·ªát Nam v√† c√°c n∆∞·ªõc x√£ h·ªôi ch·ªß nghƒ©a v·∫≠n d·ª•ng linh ho·∫°t l√Ω thuy·∫øt giai c·∫•p trong th·ªùi k·ª≥ h·ªôi nh·∫≠p v√† ph√°t tri·ªÉn.",
        color: "var(--secondary-yellow-dark)",
        link: "/future",
        image: "üå±"
    }
];

const InteractiveTimeline = () => {
    const [selectedMilestone, setSelectedMilestone] = useState(null);
    const [hoveredMilestone, setHoveredMilestone] = useState(null);

    const handleMilestoneClick = (milestone) => {
        setSelectedMilestone(milestone.id === selectedMilestone?.id ? null : milestone);
    };

    const handleLearnMore = (link) => {
        window.location.href = link;
    };

    return (
        <div className="timeline-container">
            <div className="timeline-header">
                <h2>L·ªãch S·ª≠ Ph√°t Tri·ªÉn L√Ω Thuy·∫øt Giai C·∫•p</h2>
                <p>Kh√°m ph√° h√†nh tr√¨nh ph√°t tri·ªÉn t∆∞ t∆∞·ªüng tri·∫øt h·ªçc t·ª´ Marx ƒë·∫øn th·ªùi ƒë·∫°i ng√†y nay</p>
            </div>

            <div className="timeline-wrapper">
                <div className="timeline-line"></div>
                
                {timelineData.map((milestone, index) => (
                    <div 
                        key={milestone.id}
                        className={`milestone ${index % 2 === 0 ? 'left' : 'right'} ${
                            selectedMilestone?.id === milestone.id ? 'selected' : ''
                        }`}
                        onClick={() => handleMilestoneClick(milestone)}
                        onMouseEnter={() => setHoveredMilestone(milestone)}
                        onMouseLeave={() => setHoveredMilestone(null)}
                        style={{ '--milestone-color': milestone.color }}
                    >
                        <div className="milestone-dot">
                            <span className="milestone-icon">{milestone.image}</span>
                            <div className="milestone-pulse"></div>
                        </div>
                        
                        <div className="milestone-content">
                            <div className="milestone-year">{milestone.year}</div>
                            <h3 className="milestone-title">{milestone.title}</h3>
                            <p className="milestone-description">{milestone.description}</p>
                            
                            {selectedMilestone?.id === milestone.id && (
                                <div className="milestone-details">
                                    <p>{milestone.details}</p>
                                    <div className="milestone-actions">
                                        <button 
                                            className="action-btn primary"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                handleLearnMore(milestone.link);
                                            }}
                                        >
                                            T√¨m hi·ªÉu th√™m
                                        </button>
                                        <button className="action-btn secondary">Chia s·∫ª</button>
                                    </div>
                                </div>
                            )}
                        </div>

                        {/* Hover Card */}
                        {hoveredMilestone?.id === milestone.id && !selectedMilestone && (
                            <div className="hover-card">
                                <div className="hover-card-content">
                                    <strong>{milestone.title}</strong>
                                    <span>{milestone.year}</span>
                                </div>
                            </div>
                        )}

                        {/* Connection Lines */}
                        {index < timelineData.length - 1 && (
                            <div className="milestone-connection">
                                <svg className="connection-svg" viewBox="0 0 100 50">
                                    <path 
                                        d="M 10 25 Q 50 10 90 25" 
                                        fill="none" 
                                        stroke={milestone.color} 
                                        strokeWidth="2"
                                        className="connection-path"
                                    />
                                </svg>
                            </div>
                        )}
                    </div>
                ))}
            </div>

            {/* Navigation Controls */}
            <div className="timeline-controls">
                <button 
                    className="control-btn"
                    onClick={() => setSelectedMilestone(null)}
                >
                    Reset View
                </button>
                <div className="timeline-progress">
                    <div className="progress-bar">
                        <div 
                            className="progress-fill"
                            style={{ 
                                width: selectedMilestone ? 
                                    `${((selectedMilestone.id - 1) / (timelineData.length - 1)) * 100}%` : 
                                    '0%' 
                            }}
                        ></div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default InteractiveTimeline;
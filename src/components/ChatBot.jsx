import React, { useState, useEffect, useRef } from 'react';
import { useLocation } from 'react-router-dom';
import { HiChatBubbleLeftRight, HiXMark, HiPaperAirplane, HiUser, HiCpuChip, HiSparkles } from 'react-icons/hi2';
import '../styles/ChatBot.css';
import { getWelcomeMessages, getSampleQuestions, isPhilosophyRelated, formatPhilosophyResponse } from '../utils/chatUtils';

// Cloudflare Workers AI config
const REQUEST_MIN_GAP_MS = 1000;
const MAX_BACKOFF_RETRY = 1;

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [apiStatus, setApiStatus] = useState('online'); // 'online', 'offline', 'testing', 'rate-limited'
  const [retryAfterSec, setRetryAfterSec] = useState(null);
  const messagesEndRef = useRef(null);
  const inFlightRef = useRef(new Map()); // dedupe theo userMessage
  const lastRequestTimeRef = useRef(0); // throttle requests
  const cacheRef = useRef(new Map()); // question cache: key -> { answer, ts }
  const CACHE_TTL_MS = 5 * 60 * 1000; // 5 ph√∫t
  const lastUserSubmitRef = useRef(0); // debounce input submissions
  const INPUT_DEBOUNCE_MS = 800; // th·ªùi gian t·ªëi thi·ªÉu gi·ªØa 2 l·∫ßn Enter

  const location = useLocation();
  const isEn = location.pathname.endsWith('/en') || location.pathname.includes('/en/');

  // Helpers for localization
  const t = {
    title: isEn ? 'AI Philosophy Assistant' : 'Tr·ª£ l√Ω Tri·∫øt h·ªçc AI',
    clear: isEn ? 'Clear' : 'X√≥a',
    placeholder: isEn ? 'Ask me about philosophy, class struggle...' : 'H·ªèi t√¥i v·ªÅ tri·∫øt h·ªçc, ƒë·∫•u tranh giai c·∫•p...',
    ariaOpen: isEn ? 'Open philosophy chatbot' : 'M·ªü chatbot tri·∫øt h·ªçc',
    ariaClose: isEn ? 'Close chatbot' : 'ƒê√≥ng chatbot',
    suggestions: isEn ? 'Suggested questions:' : 'C√¢u h·ªèi g·ª£i √Ω:',
    sending: isEn ? 'Sending question to AI...' : 'ƒêang g·ª≠i c√¢u h·ªèi t·ªõi AI...',
    status: {
      online: isEn ? 'AI online' : 'AI ƒëang ho·∫°t ƒë·ªông',
      offline: isEn ? 'Basic mode' : 'Ch·∫ø ƒë·ªô c∆° b·∫£n',
      rate: isEn ? 'Rate limited' : 'ƒêang b·ªã gi·ªõi h·∫°n l∆∞u l∆∞·ª£ng',
      testing: isEn ? 'Testing...' : 'ƒêang ki·ªÉm tra...'
    }
  };

  // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Tin nh·∫Øn ch√†o m·ª´ng v·ªõi g·ª£i √Ω
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage = getWelcomeMessages();
      setMessages([
        {
          id: Date.now(),
          text: welcomeMessage,
          sender: 'bot',
          timestamp: new Date()
        }
      ]);
      setShowSuggestions(true);
    }
  }, [isOpen, messages.length]);

  // G·ªçi Cloudflare Workers AI endpoint (/api/ai/chat)
  const callWorkersAI = async (prompt, setApiStatus, langHint='vi') => {
    // Build system prompt with dynamic language instruction
    const sys = langHint === 'en'
      ? 'You are a knowledgeable philosophy assistant (comparative East-West, classical-modern, Marxist). Respond in clear, concise ENGLISH.'
      : 'B·∫°n l√† tr·ª£ l√Ω tri·∫øt h·ªçc am hi·ªÉu ph√¢n t√≠ch so s√°nh (ƒê√¥ng-T√¢y, c·ªï ƒëi·ªÉn-hi·ªán ƒë·∫°i, M√°c-x√≠t). Tr·∫£ l·ªùi b·∫±ng TI·∫æNG VI·ªÜT r√µ r√†ng, s√∫c t√≠ch.';

    const payload = { messages: [ { role: 'system', content: sys }, { role: 'user', content: prompt } ] };
    const response = await fetch('/api/ai/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });
    let data;
    try {
      data = await response.json();
    } catch (e) {
      const raw = await response.text();
      throw new Error(`Invalid JSON from AI: ${raw}`);
    }
    // If serverless fell back to input/prompt format, shape still similar; extract robustly
    const answer = data?.result?.response || data?.result?.output || data?.response || data?.output || JSON.stringify(data).slice(0, 600);
    if (!response.ok) {
      if (response.status === 429) setApiStatus('rate-limited');
      throw new Error(`${response.status}: ${answer}`);
    }
    setApiStatus('online');
    return typeof answer === 'string' ? answer : JSON.stringify(answer);
  };

  // G·ª≠i tin nh·∫Øn ƒë·∫øn AI
  const sendToAI = async (userMessage, attempt = 0) => {
    const lowerMessage = userMessage.toLowerCase();

    // Normalize c√¢u h·ªèi ƒë·ªÉ cache (trim + lower + b·ªè d·∫•u ch·∫•m h·ªèi cu·ªëi)
    const normKey = lowerMessage.replace(/\?+$/,'').trim();
    const cached = cacheRef.current.get(normKey);
    if (cached && Date.now() - cached.ts < CACHE_TTL_MS) {
      console.log('[AI] d√πng cache hit cho c√¢u h·ªèi:', normKey);
      return cached.answer;
    }
    
    // Ki·ªÉm tra xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn tri·∫øt h·ªçc kh√¥ng
    if (!isPhilosophyRelated(userMessage)) {
      return "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn tri·∫øt h·ªçc. H√£y h·ªèi t√¥i v·ªÅ tri·∫øt h·ªçc ph∆∞∆°ng ƒê√¥ng (Kh·ªïng T·ª≠, L√£o T·ª≠, Ph·∫≠t gi√°o), tri·∫øt h·ªçc ph∆∞∆°ng T√¢y (Socrates, Kant, Nietzsche), tri·∫øt h·ªçc M√°c-L√™nin, ho·∫∑c c√°c ch·ªß ƒë·ªÅ nh∆∞ ƒë·∫°o ƒë·ª©c, t·ªìn t·∫°i, ch√¢n l√Ω, √Ω nghƒ©a cu·ªôc s·ªëng!";
    }

    // X·ª≠ l√Ω c√°c c√¢u ch√†o h·ªèi c∆° b·∫£n
    if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('ch√†o') || 
        lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
      return "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ tri·∫øt h·ªçc. T√¥i c√≥ th·ªÉ th·∫£o lu·∫≠n v·ªÅ tri·∫øt h·ªçc ph∆∞∆°ng ƒê√¥ng, ph∆∞∆°ng T√¢y, M√°c-L√™nin v√† nhi·ªÅu tr∆∞·ªùng ph√°i kh√°c. B·∫°n c√≥ c√¢u h·ªèi g√¨ mu·ªën th·∫£o lu·∫≠n kh√¥ng?";
    }
    
    if (lowerMessage.includes('b·∫°n l√† ai') || lowerMessage.includes('gi·ªõi thi·ªáu')) {
      return "T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ tri·∫øt h·ªçc v·ªõi ki·∫øn th·ª©c v·ªÅ nhi·ªÅu tr∆∞·ªùng ph√°i: tri·∫øt h·ªçc c·ªï ƒëi·ªÉn Hy L·∫°p, tri·∫øt h·ªçc ph∆∞∆°ng ƒê√¥ng (Kh·ªïng T·ª≠, L√£o T·ª≠, Ph·∫≠t gi√°o), tri·∫øt h·ªçc ph∆∞∆°ng T√¢y hi·ªán ƒë·∫°i, v√† tri·∫øt h·ªçc M√°c-L√™nin. H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ b·∫•t k·ª≥ ch·ªß ƒë·ªÅ tri·∫øt h·ªçc n√†o b·∫°n quan t√¢m!";
    }

    if (lowerMessage.includes('c·∫£m ∆°n') || lowerMessage.includes('thank')) {
      return "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi n√†o v·ªÅ tri·∫øt h·ªçc, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi t√¥i nh√©. T√¥i lu√¥n s·∫µn s√†ng th·∫£o lu·∫≠n v·ªÅ c√°c ch·ªß ƒë·ªÅ tri·∫øt h·ªçc th√∫ v·ªã!";
    }

    if (lowerMessage.includes('t·∫°m bi·ªát') || lowerMessage.includes('bye')) {
      return "T·∫°m bi·ªát! Hy v·ªçng cu·ªôc tr√≤ chuy·ªán v·ªÅ tri·∫øt h·ªçc h√¥m nay h·ªØu √≠ch v·ªõi b·∫°n. Ch√∫c b·∫°n c√≥ m·ªôt ng√†y t·ªët l√†nh v√† ƒë·ª´ng qu√™n ti·∫øp t·ª•c kh√°m ph√° th·∫ø gi·ªõi tri·∫øt h·ªçc nh√©!";
    }

    // ∆ØU TI√äN G·ªåI API AI CHO T·∫§T C·∫¢ C√ÇU H·ªéI TRI·∫æT H·ªåC
  console.log('[AI] chu·∫©n b·ªã g·ªçi API cho c√¢u h·ªèi:', userMessage);
    
    // T·∫°o prompt cho c√°c c√¢u h·ªèi tri·∫øt h·ªçc
    const prompt = `B·∫°n l√† m·ªôt chuy√™n gia tri·∫øt h·ªçc c√≥ ki·∫øn th·ª©c s√¢u r·ªông v·ªÅ nhi·ªÅu tr∆∞·ªùng ph√°i tri·∫øt h·ªçc kh√°c nhau. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch:

- Ch√≠nh x√°c v√† c√≥ cƒÉn c·ª© khoa h·ªçc
- D·ªÖ hi·ªÉu, ph√π h·ª£p v·ªõi nhi·ªÅu ƒë·ªëi t∆∞·ª£ng  
- C√≥ v√≠ d·ª• minh h·ªça c·ª• th·ªÉ khi c·∫ßn thi·∫øt
- So s√°nh gi·ªØa c√°c tr∆∞·ªùng ph√°i khi ph√π h·ª£p
- Bao g·ªìm c·∫£ tri·∫øt h·ªçc ph∆∞∆°ng ƒê√¥ng v√† ph∆∞∆°ng T√¢y
- Li√™n h·ªá v·ªõi th·ª±c ti·ªÖn ƒë·ªùi s·ªëng khi c√≥ th·ªÉ

Lƒ©nh v·ª±c chuy√™n m√¥n bao g·ªìm:
- Tri·∫øt h·ªçc c·ªï ƒëi·ªÉn Hy L·∫°p (Socrates, Plato, Aristotle)
- Tri·∫øt h·ªçc ph∆∞∆°ng ƒê√¥ng (Kh·ªïng T·ª≠, L√£o T·ª≠, Ph·∫≠t gi√°o)
- Tri·∫øt h·ªçc ph∆∞∆°ng T√¢y hi·ªán ƒë·∫°i (Kant, Hegel, Nietzsche)
- Tri·∫øt h·ªçc M√°c-L√™nin
- C√°c ng√†nh tri·∫øt h·ªçc: ƒë·∫°o ƒë·ª©c h·ªçc, th·∫©m m·ªπ h·ªçc, nh·∫≠n th·ª©c lu·∫≠n

C√¢u h·ªèi: ${userMessage}

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn nh∆∞ng ƒë·∫ßy ƒë·ªß th√¥ng tin (kho·∫£ng 150-250 t·ª´). N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn nhi·ªÅu tr∆∞·ªùng ph√°i, h√£y so s√°nh quan ƒëi·ªÉm c·ªßa h·ªç.`;

    try {
      // In-flight dedupe theo nguy√™n vƒÉn c√¢u h·ªèi
      if (inFlightRef.current.has(userMessage)) {
        console.log('[AI] ph√°t hi·ªán y√™u c·∫ßu ƒëang x·ª≠ l√Ω, d√πng l·∫°i promise s·∫µn c√≥');
        return inFlightRef.current.get(userMessage);
      }

      // Throttle: ƒë·∫£m b·∫£o c√°ch nhau t·ªëi thi·ªÉu REQUEST_MIN_GAP_MS
      const now = Date.now();
      const gap = now - lastRequestTimeRef.current;
      if (gap < REQUEST_MIN_GAP_MS) {
        const waitMs = REQUEST_MIN_GAP_MS - gap;
        console.log(`[AI] throttle: ch·ªù ${waitMs}ms tr∆∞·ªõc khi g·ª≠i`);
        await new Promise(r => setTimeout(r, waitMs));
      }
      lastRequestTimeRef.current = Date.now();

  console.log('ü§ñ', t.sending);
      setApiStatus('testing');

      // Simple language detection: if message has no Vietnamese diacritics and many English stopwords, switch to English
      const hasVietnamese = /[√†√°·∫°·∫£√£ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√¢·∫ß·∫•·∫≠·∫©·∫´√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë]/i.test(userMessage);
      const englishIndicators = /(what|why|how|explain|compare|philosophy|dialectic|materialism|hegel|marx)/i.test(userMessage);
      const langHint = hasVietnamese ? 'vi' : (englishIndicators ? 'en' : (isEn ? 'en' : 'vi'));

      const p = (async () => {
        const responseText = await callWorkersAI(prompt, setApiStatus, langHint);
        return formatPhilosophyResponse(responseText);
      })();

      // l∆∞u promise ƒë·ªÉ dedupe
      inFlightRef.current.set(userMessage, p);
  const result = await p;
      inFlightRef.current.delete(userMessage);
  // L∆∞u cache
  cacheRef.current.set(normKey, { answer: result, ts: Date.now() });
      return result;

    } catch (error) {
      console.error('L·ªói khi g·ªçi AI:', error);
      setApiStatus('offline'); // ƒê√°nh d·∫•u API offline
      inFlightRef.current.delete(userMessage);
      
      // Backoff t·ª± ƒë·ªông cho 429 (n·∫øu c√≤n l∆∞·ª£t retry)
      if (error.message.includes('429') && attempt < MAX_BACKOFF_RETRY) {
        // C·ªë g·∫Øng l·∫•y th·ªùi gian ch·ªù: ∆∞u ti√™n state retryAfterSec, n·∫øu ch∆∞a c√≥ th√¨ parse t·ª´ th√¥ng ƒëi·ªáp
        let waitSec = retryAfterSec;
        if (!waitSec) {
          const match = error.message.match(/"retryDelay"\s*:\s*"(\d+)s"/);
          if (match) waitSec = parseInt(match[1], 10);
        }
        if (!waitSec || Number.isNaN(waitSec)) waitSec = 30; // default
        console.log(`[AI] 429: ch·ªù ${waitSec}s r·ªìi retry (attempt ${attempt + 1}/${MAX_BACKOFF_RETRY})`);
        setApiStatus('rate-limited');
        await new Promise(r => setTimeout(r, waitSec * 1000));
        setApiStatus('testing');
        return await sendToAI(userMessage, attempt + 1);
      }
      
      // CH·ªà s·ª≠ d·ª•ng fallback KHI API TH·∫§T B·∫†I
      const emergencyFallbackResponses = {
        'tri·∫øt h·ªçc': 'Tri·∫øt h·ªçc l√† ng√†nh h·ªçc nghi√™n c·ª©u nh·ªØng v·∫•n ƒë·ªÅ c∆° b·∫£n v·ªÅ th·ª±c t·∫°i, ki·∫øn th·ª©c, gi√° tr·ªã v√† √Ω nghƒ©a.',
        'socrates': 'Socrates l√† tri·∫øt gia Hy L·∫°p c·ªï ƒë·∫°i, n·ªïi ti·∫øng v·ªõi c√¢u "T√¥i ch·ªâ bi·∫øt r·∫±ng t√¥i kh√¥ng bi·∫øt g√¨".',
        'kh·ªïng t·ª≠': 'Kh·ªïng T·ª≠ l√† tri·∫øt gia Trung Qu·ªëc, s√°ng l·∫≠p Nho gi√°o, nh·∫•n m·∫°nh ƒë·∫°o ƒë·ª©c.',
        '√Ω nghƒ©a': '√ù nghƒ©a cu·ªôc s·ªëng l√† c√¢u h·ªèi tri·∫øt h·ªçc c∆° b·∫£n m√† nhi·ªÅu tri·∫øt gia ƒë√£ t√¨m c√°ch tr·∫£ l·ªùi.',
        't·ª± do': 'T·ª± do l√† kh·∫£ nƒÉng t·ª± quy·∫øt ƒë·ªãnh v√† h√†nh ƒë·ªông theo √Ω mu·ªën c·ªßa m√¨nh.',
      };
      
      // Ch·ªâ d√πng fallback cho m·ªôt s·ªë c√¢u h·ªèi c∆° b·∫£n
      for (const [key, response] of Object.entries(emergencyFallbackResponses)) {
        if (lowerMessage.includes(key)) {
          return `‚ö†Ô∏è **API Offline** - ƒêang s·ª≠ d·ª•ng ch·∫ø ƒë·ªô c∆° b·∫£n:\n\n${response}\n\n*Vui l√≤ng th·ª≠ l·∫°i sau ƒë·ªÉ nh·∫≠n c√¢u tr·∫£ l·ªùi chi ti·∫øt t·ª´ AI.*`;
        }
      }
      
      // Error handling chi ti·∫øt
      if (error.message.includes('403')) {
        return 'Xin l·ªói, kh√≥a API kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh API.';
      }
      if (error.message.includes('401')) {
        return 'Xin l·ªói, kh√≥a API kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i kh√≥a API.';
      }
      if (error.message.includes('404')) {
        return 'Xin l·ªói, model AI hi·ªán kh√¥ng kh·∫£ d·ª•ng. T√¥i ƒëang s·ª≠ d·ª•ng ki·∫øn th·ª©c c∆° b·∫£n ƒë·ªÉ tr·∫£ l·ªùi. Vui l√≤ng h·ªèi v·ªÅ c√°c ch·ªß ƒë·ªÅ tri·∫øt h·ªçc nh∆∞: Socrates, Kh·ªïng T·ª≠, ƒë·∫°o ƒë·ª©c h·ªçc, t·ªìn t·∫°i, ch√¢n l√Ω, t·ª± do, √Ω nghƒ©a cu·ªôc s·ªëng.';
      }
      if (error.message.includes('429')) {
        const hint = retryAfterSec ? `(~${retryAfterSec}s)` : 'trong gi√¢y l√°t';
        return `Xin l·ªói, h·ªá th·ªëng ƒëang b·ªã gi·ªõi h·∫°n l∆∞u l∆∞·ª£ng v√† ƒë√£ th·ª≠ l·∫°i 1 l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i ${hint}.`;
      }
      return isEn ? `Sorry, I encountered a technical issue: ${error.message}. Please try again later.` : `Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t: ${error.message}. Vui l√≤ng th·ª≠ l·∫°i sau.`;
    }
  };

  // X·ª≠ l√Ω g·ª≠i tin nh·∫Øn
  const handleSendMessage = async (messageText = null) => {
    const textToSend = messageText || inputMessage.trim();
    if (!textToSend || isLoading) return;

    // Debounce ki·ªÉm so√°t spam Enter
    const now = Date.now();
    if (now - lastUserSubmitRef.current < INPUT_DEBOUNCE_MS) {
      console.log('[AI] b·ªã ch·∫∑n b·ªüi debounce input');
      return;
    }
    lastUserSubmitRef.current = now;

    setInputMessage('');
    setShowSuggestions(false);

    // Th√™m tin nh·∫Øn c·ªßa user
    const userMsg = {
      id: Date.now(),
      text: textToSend,
      sender: 'user',
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMsg]);

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t·∫£i
    setIsLoading(true);

    // G·ª≠i ƒë·∫øn AI v√† nh·∫≠n ph·∫£n h·ªìi
  const botResponse = await sendToAI(textToSend);

    // Th√™m ph·∫£n h·ªìi c·ªßa bot
    const botMsg = {
      id: Date.now() + 1,
      text: botResponse,
      sender: 'bot',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, botMsg]);
    setIsLoading(false);
  };

  // X·ª≠ l√Ω g·ª£i √Ω c√¢u h·ªèi
  const handleSuggestionClick = (suggestion) => {
    handleSendMessage(suggestion);
  };

  // X·ª≠ l√Ω ph√≠m Enter
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Toggle chatbot
  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  // Clear chat
  const clearChat = () => {
    setMessages([]);
    setShowSuggestions(true);
    // Th√™m l·∫°i tin nh·∫Øn ch√†o m·ª´ng
    setTimeout(() => {
      const welcomeMessage = getWelcomeMessages();
      setMessages([{
        id: Date.now(),
        text: welcomeMessage,
        sender: 'bot',
        timestamp: new Date()
      }]);
    }, 100);
  };

  return (
    <div className="chatbot-container">
      {/* N√∫t m·ªü chatbot */}
      {!isOpen && (
        <button 
          className="chatbot-toggle-btn"
          onClick={toggleChat}
          aria-label={t.ariaOpen}
        >
          <HiChatBubbleLeftRight className="w-6 h-6" />
          <span className="chatbot-badge">AI</span>
        </button>
      )}

      {/* C·ª≠a s·ªï chat */}
      {isOpen && (
        <div className="chatbot-window">
          {/* Header */}
          <div className="chatbot-header">
            <div className="chatbot-header-info">
              <HiCpuChip className="w-5 h-5 text-blue-400" />
              <div>
                <h3>{t.title}</h3>
                <p className="flex items-center gap-2">
                  <span className={`api-status ${apiStatus}`}></span>
                  {apiStatus === 'online' ? t.status.online : 
                   apiStatus === 'offline' ? t.status.offline : 
                   apiStatus === 'rate-limited' ? `${t.status.rate}${retryAfterSec ? ` (~${retryAfterSec}s)` : ''}` : t.status.testing}
                </p>
              </div>
            </div>
            <div className="chatbot-header-actions">
              <button 
                onClick={clearChat}
                className="chatbot-clear-btn"
                title={isEn ? 'Clear conversation' : 'X√≥a cu·ªôc tr√≤ chuy·ªán'}
              >
                {t.clear}
              </button>
              <button 
                onClick={toggleChat}
                className="chatbot-close-btn"
                aria-label={t.ariaClose}
              >
                <HiXMark className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* Messages */}
          <div className="chatbot-messages">
            {messages.map((message) => (
              <div 
                key={message.id} 
                className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
              >
                <div className="message-avatar">
                  {message.sender === 'user' ? (
                    <HiUser className="w-4 h-4" />
                  ) : (
                    <HiCpuChip className="w-4 h-4" />
                  )}
                </div>
                <div className="message-content">
                  <p dangerouslySetInnerHTML={{ __html: message.text }}></p>
                  <span className="message-time">
                    {message.timestamp.toLocaleTimeString('vi-VN', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </span>
                </div>
              </div>
            ))}

            {/* G·ª£i √Ω c√¢u h·ªèi */}
            {showSuggestions && messages.length <= 1 && (
              <div className="suggestions-container">
                <div className="suggestions-header">
                  <HiSparkles className="w-4 h-4" />
                  <span>{t.suggestions}</span>
                </div>
                <div className="suggestions-grid">
                  {getSampleQuestions().map((question, index) => (
                    <button
                      key={index}
                      className="suggestion-btn"
                      onClick={() => handleSuggestionClick(question)}
                    >
                      {question}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Loading indicator */}
            {isLoading && (
              <div className="message bot-message">
                <div className="message-avatar">
                  <HiCpuChip className="w-4 h-4" />
                </div>
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="chatbot-input">
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t.placeholder}
              className="chatbot-textarea"
              rows="2"
              disabled={isLoading}
            />
            <button 
              onClick={() => handleSendMessage()}
              disabled={!inputMessage.trim() || isLoading}
              className="chatbot-send-btn"
              aria-label="G·ª≠i tin nh·∫Øn"
            >
              <HiPaperAirplane className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatBot;
import React, { useState, useRef, useEffect } from 'react';
import { Link } from 'react-router-dom';
import '../styles/KnowledgeMap.css';

const knowledgeData = {
    nodes: [
        {
            id: 'center',
            label: 'ƒê·∫•u Tranh Giai C·∫•p',
            type: 'center',
            x: 400,
            y: 300,
            color: 'var(--primary-red)',
            description: 'Kh√°i ni·ªám trung t√¢m c·ªßa l√Ω thuy·∫øt M√°c-L√™nin'
        },
        {
            id: 'class',
            label: 'Giai C·∫•p',
            type: 'main',
            x: 200,
            y: 200,
            color: 'var(--secondary-yellow)',
            description: 'Nh√≥m ng∆∞·ªùi c√≥ v·ªã tr√≠ kinh t·∫ø - x√£ h·ªôi gi·ªëng nhau'
        },
        {
            id: 'conflict',
            label: 'Xung ƒê·ªôt',
            type: 'main',
            x: 600,
            y: 200,
            color: 'var(--primary-red-light)',
            description: 'M√¢u thu·∫´n l·ª£i √≠ch gi·ªØa c√°c giai c·∫•p'
        },
        {
            id: 'history',
            label: 'L·ªãch S·ª≠',
            type: 'main',
            x: 200,
            y: 400,
            color: 'var(--accent-gold)',
            description: 'ƒê·ªông l·ª±c ph√°t tri·ªÉn x√£ h·ªôi lo√†i ng∆∞·ªùi'
        },
        {
            id: 'revolution',
            label: 'C√°ch M·∫°ng',
            type: 'main',
            x: 600,
            y: 400,
            color: 'var(--secondary-yellow-dark)',
            description: 'H√¨nh th·ª©c cao nh·∫•t c·ªßa ƒë·∫•u tranh giai c·∫•p'
        },
        {
            id: 'bourgeois',
            label: 'T∆∞ S·∫£n',
            type: 'sub',
            x: 100,
            y: 100,
            color: '#e74c3c',
            description: 'Giai c·∫•p s·ªü h·ªØu t∆∞ li·ªáu s·∫£n xu·∫•t'
        },
        {
            id: 'proletariat',
            label: 'V√¥ S·∫£n',
            type: 'sub',
            x: 300,
            y: 100,
            color: '#3498db',
            description: 'Giai c·∫•p lao ƒë·ªông kh√¥ng s·ªü h·ªØu t∆∞ li·ªáu s·∫£n xu·∫•t'
        },
        {
            id: 'socialism',
            label: 'Ch·ªß Nghƒ©a X√£ H·ªôi',
            type: 'sub',
            x: 500,
            y: 500,
            color: '#f39c12',
            description: 'X√£ h·ªôi kh√¥ng c√≤n ƒë·ªëi kh√°ng giai c·∫•p'
        },
        {
            id: 'communism',
            label: 'Ch·ªß Nghƒ©a C·ªông S·∫£n',
            type: 'sub',
            x: 700,
            y: 500,
            color: '#9b59b6',
            description: 'X√£ h·ªôi l√Ω t∆∞·ªüng kh√¥ng c√≥ giai c·∫•p'
        }
    ],
    connections: [
        { from: 'center', to: 'class' },
        { from: 'center', to: 'conflict' },
        { from: 'center', to: 'history' },
        { from: 'center', to: 'revolution' },
        { from: 'class', to: 'bourgeois' },
        { from: 'class', to: 'proletariat' },
        { from: 'conflict', to: 'bourgeois' },
        { from: 'conflict', to: 'proletariat' },
        { from: 'revolution', to: 'socialism' },
        { from: 'socialism', to: 'communism' },
        { from: 'history', to: 'revolution' }
    ]
};

const KnowledgeMap = () => {
    const [selectedNode, setSelectedNode] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [zoomLevel, setZoomLevel] = useState(1);
    const [panOffset, setPanOffset] = useState({ x: 0, y: 0 });
    const [isDragging, setIsDragging] = useState(false);
    const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
    const svgRef = useRef(null);

    // H√†m x·ª≠ l√Ω navigation khi click "T√¨m hi·ªÉu th√™m"
    const handleLearnMore = (nodeId) => {
        const nodeLinks = {
            'center': '/theory',
            'class': '/theory',
            'conflict': '/role',
            'history': '/theory',
            'revolution': '/future',
            'bourgeois': '/role',
            'proletariat': '/role',
            'socialism': '/future',
            'communism': '/future'
        };
        
        const targetPath = nodeLinks[nodeId] || '/theory';
        window.location.href = targetPath;
    };

    const filteredNodes = knowledgeData.nodes.filter(node =>
        node.label.toLowerCase().includes(searchTerm.toLowerCase()) ||
        node.description.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const handleNodeClick = (node) => {
        setSelectedNode(node.id === selectedNode?.id ? null : node);
    };

    const handleZoom = (direction) => {
        const newZoom = direction === 'in' 
            ? Math.min(zoomLevel * 1.2, 3) 
            : Math.max(zoomLevel / 1.2, 0.5);
        setZoomLevel(newZoom);
    };

    const handleMouseDown = (e) => {
        if (e.target === svgRef.current) {
            setIsDragging(true);
            setDragStart({
                x: e.clientX - panOffset.x,
                y: e.clientY - panOffset.y
            });
        }
    };

    const handleMouseMove = (e) => {
        if (isDragging) {
            setPanOffset({
                x: e.clientX - dragStart.x,
                y: e.clientY - dragStart.y
            });
        }
    };

    const handleMouseUp = () => {
        setIsDragging(false);
    };

    useEffect(() => {
        if (isDragging) {
            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
            return () => {
                document.removeEventListener('mousemove', handleMouseMove);
                document.removeEventListener('mouseup', handleMouseUp);
            };
        }
    }, [isDragging, dragStart]);

    const resetView = () => {
        setZoomLevel(1);
        setPanOffset({ x: 0, y: 0 });
        setSelectedNode(null);
        setSearchTerm('');
    };

    return (
        <div className="knowledge-map-container">
            <div className="knowledge-map-header">
                <h2>B·∫£n ƒê·ªì Tri Th·ª©c Tri·∫øt H·ªçc</h2>
                <p>Kh√°m ph√° m·ªëi li√™n k·∫øt gi·ªØa c√°c kh√°i ni·ªám trong l√Ω thuy·∫øt ƒë·∫•u tranh giai c·∫•p</p>
            </div>

            {/* Search and Controls */}
            <div className="map-controls">
                <div className="search-container">
                    <input
                        type="text"
                        placeholder="T√¨m ki·∫øm kh√°i ni·ªám..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="search-input"
                    />
                    <button 
                        className="search-clear"
                        onClick={() => setSearchTerm('')}
                    >
                        ‚úï
                    </button>
                </div>

                <div className="zoom-controls">
                    <button 
                        className="zoom-btn"
                        onClick={() => handleZoom('in')}
                    >
                        üîç+
                    </button>
                    <span className="zoom-level">{Math.round(zoomLevel * 100)}%</span>
                    <button 
                        className="zoom-btn"
                        onClick={() => handleZoom('out')}
                    >
                        üîç-
                    </button>
                </div>

                <button className="reset-btn" onClick={resetView}>
                    Reset View
                </button>
            </div>

            {/* Knowledge Map SVG */}
            <div className="map-viewport">
                <svg
                    ref={svgRef}
                    className="knowledge-svg"
                    viewBox="0 0 800 600"
                    onMouseDown={handleMouseDown}
                    style={{
                        transform: `scale(${zoomLevel}) translate(${panOffset.x}px, ${panOffset.y}px)`,
                        cursor: isDragging ? 'grabbing' : 'grab'
                    }}
                >
                    {/* Render Connections */}
                    <defs>
                        <marker
                            id="arrowhead"
                            markerWidth="10"
                            markerHeight="7"
                            refX="9"
                            refY="3.5"
                            orient="auto"
                        >
                            <polygon
                                points="0 0, 10 3.5, 0 7"
                                fill="#666"
                            />
                        </marker>
                    </defs>

                    {knowledgeData.connections.map((connection, index) => {
                        const fromNode = knowledgeData.nodes.find(n => n.id === connection.from);
                        const toNode = knowledgeData.nodes.find(n => n.id === connection.to);
                        
                        if (!fromNode || !toNode) return null;

                        const isHighlighted = selectedNode && (
                            selectedNode.id === fromNode.id || 
                            selectedNode.id === toNode.id
                        );

                        return (
                            <line
                                key={index}
                                x1={fromNode.x}
                                y1={fromNode.y}
                                x2={toNode.x}
                                y2={toNode.y}
                                stroke={isHighlighted ? fromNode.color : '#ddd'}
                                strokeWidth={isHighlighted ? 3 : 1.5}
                                markerEnd="url(#arrowhead)"
                                className={`connection-line ${isHighlighted ? 'highlighted' : ''}`}
                            />
                        );
                    })}

                    {/* Render Nodes */}
                    {filteredNodes.map((node) => {
                        const isSelected = selectedNode?.id === node.id;
                        const isConnected = selectedNode && knowledgeData.connections.some(
                            conn => (conn.from === selectedNode.id && conn.to === node.id) ||
                                   (conn.to === selectedNode.id && conn.from === node.id)
                        );

                        const nodeSize = node.type === 'center' ? 50 : 
                                       node.type === 'main' ? 40 : 30;

                        return (
                            <g
                                key={node.id}
                                className={`knowledge-node ${node.type} ${isSelected ? 'selected' : ''} ${isConnected ? 'connected' : ''}`}
                                onClick={() => handleNodeClick(node)}
                                style={{ cursor: 'pointer' }}
                            >
                                {/* Node Circle */}
                                <circle
                                    cx={node.x}
                                    cy={node.y}
                                    r={nodeSize}
                                    fill={node.color}
                                    stroke={isSelected ? '#fff' : 'none'}
                                    strokeWidth={isSelected ? 4 : 0}
                                    className="node-circle"
                                />

                                {/* Pulse Effect */}
                                {isSelected && (
                                    <circle
                                        cx={node.x}
                                        cy={node.y}
                                        r={nodeSize}
                                        fill="none"
                                        stroke={node.color}
                                        strokeWidth="2"
                                        className="node-pulse"
                                    />
                                )}

                                {/* Node Label */}
                                <text
                                    x={node.x}
                                    y={node.y + nodeSize + 20}
                                    textAnchor="middle"
                                    className="node-label"
                                    fill="#2c3e50"
                                >
                                    {node.label}
                                </text>

                                {/* Node Icon based on type */}
                                <text
                                    x={node.x}
                                    y={node.y + 5}
                                    textAnchor="middle"
                                    className="node-icon"
                                    fill="white"
                                    fontSize={node.type === 'center' ? '20' : node.type === 'main' ? '16' : '12'}
                                >
                                    {getNodeIcon(node.type, node.id)}
                                </text>
                            </g>
                        );
                    })}
                </svg>

                {/* Node Details Panel */}
                {selectedNode && (
                    <div className="node-details-panel">
                        <div className="panel-header">
                            <h3>{selectedNode.label}</h3>
                            <button 
                                className="close-panel"
                                onClick={() => setSelectedNode(null)}
                            >
                                ‚úï
                            </button>
                        </div>
                        <div className="panel-content">
                            <p className="node-description">{selectedNode.description}</p>
                            <div className="node-connections">
                                <h4>K·∫øt n·ªëi:</h4>
                                <ul>
                                    {knowledgeData.connections
                                        .filter(conn => conn.from === selectedNode.id || conn.to === selectedNode.id)
                                        .map((conn, index) => {
                                            const connectedNodeId = conn.from === selectedNode.id ? conn.to : conn.from;
                                            const connectedNode = knowledgeData.nodes.find(n => n.id === connectedNodeId);
                                            return (
                                                <li key={index}>
                                                    <span 
                                                        className="connected-node"
                                                        onClick={() => handleNodeClick(connectedNode)}
                                                        style={{ color: connectedNode.color }}
                                                    >
                                                        {connectedNode.label}
                                                    </span>
                                                </li>
                                            );
                                        })
                                    }
                                </ul>
                            </div>
                            <div className="panel-actions">
                                <button 
                                    className="action-btn"
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        handleLearnMore(selectedNode.id);
                                    }}
                                >
                                    T√¨m hi·ªÉu th√™m
                                </button>
                                <button className="action-btn secondary">Chia s·∫ª</button>
                            </div>
                        </div>
                    </div>
                )}
            </div>

            {/* Legend */}
            <div className="map-legend">
                <h4>Ch√∫ th√≠ch:</h4>
                <div className="legend-items">
                    <div className="legend-item">
                        <div className="legend-color center"></div>
                        <span>Kh√°i ni·ªám trung t√¢m</span>
                    </div>
                    <div className="legend-item">
                        <div className="legend-color main"></div>
                        <span>Kh√°i ni·ªám ch√≠nh</span>
                    </div>
                    <div className="legend-item">
                        <div className="legend-color sub"></div>
                        <span>Kh√°i ni·ªám ph·ª•</span>
                    </div>
                </div>
            </div>
        </div>
    );
};

// Helper function for node icons
const getNodeIcon = (type, id) => {
    const icons = {
        center: '‚ö°',
        class: 'üë•',
        conflict: '‚öîÔ∏è',
        history: 'üìö',
        revolution: 'üö©',
        bourgeois: 'üíº',
        proletariat: 'üî®',
        socialism: 'üå±',
        communism: 'üåü'
    };
    return icons[id] || (type === 'center' ? 'üí°' : type === 'main' ? 'üîµ' : 'üîò');
};

export default KnowledgeMap;